#!/usr/bin/env python3
import rospy
import rosnode
from yolov8_segmentation_tracking_ros.msg import YoloResult
from geometry_msgs.msg import Twist
from vision_msgs.msg import Detection2DArray
from std_msgs.msg import Int32
from std_srvs.srv import SetBool, SetBoolResponse
import numpy as np

class AIControlNode:
    def __init__(self):
        rospy.init_node('control_bbox', anonymous=True)

        rospy.Subscriber('/yolo_result', YoloResult, self.yolo_result_callback)
        self.cmd_vel_pub = rospy.Publisher('/skid_steer/cmd_vel', Twist, queue_size=10)
        rospy.Subscriber('/navigation_control', Int32, self.navigation_control_callback)

        self.Kp = 0.5
        self.Ki = 0.0
        self.Kd = 0.1
        self.prev_error = 0.0
        self.integral = 0.0
        self.image_width = 1024
        self.image_height = 768  
        self.navigation_enabled = False  
        self.linear_velocity = 1.5  
        self.reverse_pid = False

        self.set_linear_velocity_service = rospy.Service('/set_linear_velocity', SetBool, self.set_linear_velocity)
        self.decrease_linear_velocity_service = rospy.Service('/decrease_linear_velocity', SetBool, self.decrease_linear_velocity)

        self.alpha = 0.1  
        self.smoothed_pid_output = 0.0
        self.deadband = 5.0  

        # Define ROI in pixel coordinates
        self.roi = [
            (0.25 * self.image_width, 0.0 * self.image_height),
            (0.75 * self.image_width, 0.0 * self.image_height),
            (0.75 * self.image_width, 1.0 * self.image_height),
            (0.25 * self.image_width, 1.0 * self.image_height)
        ]

    def yolo_result_callback(self, msg):
        if self.navigation_enabled:
            min_distance_to_center = float('inf')
            closest_bbox = None
            
            for detection in msg.detections.detections:
                bbox = detection.bbox
                track_center_x = bbox.center.x
                track_center_y = bbox.center.y
                
                # Check if the center of the bounding box is within the ROI
                if self.is_within_roi(track_center_x, track_center_y):
                    distance_to_center = abs(track_center_x - (self.image_width / 2))
                    
                    if distance_to_center < min_distance_to_center:
                        min_distance_to_center = distance_to_center
                        closest_bbox = bbox

            if closest_bbox is None:
                self.publish_zero_velocity()
                return

            track_center_x = closest_bbox.center.x
            self.follow_track(track_center_x)

    def is_within_roi(self, x, y):
        return (self.roi[0][0] <= x <= self.roi[1][0] and
                self.roi[0][1] <= y <= self.roi[2][1])

    def follow_track(self, track_center_x):
        error = track_center_x - (self.image_width / 2)
        
        if abs(error) < self.deadband:
            error = 0
        
        self.integral += error
        derivative = error - self.prev_error
        pid_output = self.Kp * error + self.Ki * self.integral + self.Kd * derivative
        self.prev_error = error

        # Low-pass filter
        self.smoothed_pid_output = self.alpha * pid_output + (1 - self.alpha) * self.smoothed_pid_output

        pid_output = np.clip(self.smoothed_pid_output, -0.5, 0.5)

        cmd_vel = Twist()
        
        if abs(error) < 10: 
            rospy.loginfo("Going Straight")
            cmd_vel.linear.x = self.linear_velocity  
            cmd_vel.angular.z = 0.0
        elif pid_output > 0:
            rospy.loginfo("Turning Right")
            cmd_vel.linear.x = self.linear_velocity
            cmd_vel.angular.z = pid_output
        else:
            rospy.loginfo("Turning Left")
            cmd_vel.linear.x = self.linear_velocity
            cmd_vel.angular.z = pid_output

        if self.reverse_pid:
            cmd_vel.linear.x = -cmd_vel.linear.x
            cmd_vel.angular.z = -cmd_vel.angular.z

        self.cmd_vel_pub.publish(cmd_vel)

    def publish_zero_velocity(self):
        cmd_vel = Twist()
        cmd_vel.linear.x = 0.0
        cmd_vel.angular.z = 0.0
        self.cmd_vel_pub.publish(cmd_vel)

    def navigation_control_callback(self, msg):
        if msg.data == 1:  
            self.navigation_enabled = True
            self.reverse_pid = False
            rospy.loginfo("Navigation enabled.")
            rosnode.kill_nodes(['/joy_node'])
            rospy.loginfo("joy_node killed.")
        elif msg.data == 0:  
            self.navigation_enabled = False
            self.publish_zero_velocity()
            rospy.loginfo("Navigation disabled.")
        elif msg.data == 2:
            self.navigation_enabled = True
            self.reverse_pid = True
            rospy.loginfo("Navigation enabled with reversed PID control.")
            rosnode.kill_nodes(['/joy_node'])
            rospy.loginfo("joy_node killed.")

    def set_linear_velocity(self, req):
        if req.data:  
            if self.linear_velocity < 3.0:  
                self.linear_velocity += 0.5
            rospy.loginfo("Linear velocity set to: {}".format(self.linear_velocity))
        else:
            rospy.loginfo("Linear velocity unchanged: {}".format(self.linear_velocity))
        return SetBoolResponse(success=True)

    def decrease_linear_velocity(self, req):
        if req.data:  
            if self.linear_velocity > 1.5:  
                self.linear_velocity -= 0.5
            rospy.loginfo("Linear velocity set to: {}".format(self.linear_velocity))
        else:
            rospy.loginfo("Linear velocity unchanged: {}".format(self.linear_velocity))
        return SetBoolResponse(success=True)

if __name__ == '__main__':
    try:
        ai_control_node = AIControlNode()
        rate = rospy.Rate(0.02)  
        while not rospy.is_shutdown():
            rate.sleep()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
